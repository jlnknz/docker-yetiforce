# We do not run this image as root, so not required.
# user nginx;

# FIXME review this config in depth

pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {

    # FIXME check this?
   # sendfile            	on;
   # tcp_nopush          	on;
   # tcp_nodelay         	on;
   # keepalive_timeout   	65;
   # types_hash_max_size 	2048;

    # DOS protection
    # FIXME limit_req_zone $binary_remote_addr zone=one:10m rate=30r/m;

    # needs to be set as we are not running as root
    client_body_temp_path /tmp/client_temp;
    proxy_temp_path       /tmp/proxy_temp_path;
    fastcgi_temp_path     /tmp/fastcgi_temp;
    uwsgi_temp_path       /tmp/uwsgi_temp;
    scgi_temp_path        /tmp/scgi_temp;

    include               /etc/nginx/mime.types;
    default_type          application/octet-stream;

    # Define our access log format
    log_format  main  '[nginx] $remote_addr - $remote_user [$time_iso8601] '
        '"$sanitized_request" '
        '$status $body_bytes_sent $request_time "$sanitized_http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';

    server {
        listen 8080;
        server_name _;

        # Remove sensitive data from logs
        # - query string params
        set $sanitized_request $request;
        set $sanitized_http_referer $http_referer;
        if  ($request ~* (.*)\?.*\s+([^\s]+)) {
            set $sanitized_request "$1?****** $2";
        }
        if ($http_referer ~* (.*)\?.*) {
            set $sanitized_http_referer "$1?***";
        }

        # Security - Hide nginx version number in error pages and Server header
        server_tokens off;

        # Add logging
        error_log /dev/stderr info;
        access_log /dev/stdout main;

        root /var/www/html/public_html;

        index index.php index.html;

        ##
        # Best nginx configuration for YetiForceCRM
        # Created by YetiForceCompany
        ##
        ## Security
        add_header x-frame-options "SAMEORIGIN" always;
        add_header x-xss-protection "1; mode=block" always;
        add_header strict-transport-security "max-age=31536000; includeSubDomains; preload" always;
        add_header x-content-type-options "nosniff" always;
        add_header referrer-policy "no-referrer" always;
        add_header x-robots-tag "none" always;
        add_header x-permitted-cross-domain-policies "none" always;
        add_header expect-ct "enforce; max-age=3600" always;
        add_header content-security-policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always;
        add_header Cache-Control 'private, no-cache, no-store, must-revalidate, post-check=0, pre-check=0';

        # FIXME what is that?   more_set_headers 'Server: ';

        ## Stability
        charset utf-8;
        client_max_body_size 100M;
        client_body_buffer_size 100M;
        client_body_timeout 600;
        send_timeout 600;
        fastcgi_buffers 256 256k;

        ## Performance
        access_log off;
        gzip on;
        gzip_disable "msie6";

        # yetiforce acceptable methods
        if ($request_method !~ ^(GET|POST|PUT|OPTIONS|PATCH|PROPFIND|REPORT|LOCK|DELETE|COPY|MOVE)$ ) {
          return 405;
        }

        location ~* ^.+.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt|ttf|woff2)$ {
            access_log off;
            expires 1d;
            add_header Cache-Control public;
        }

        # Yeti API
        rewrite ^/webservice/(.*)/(.*)/(.*)$ /webservice.php?module=$1&action=$2&record=$3 break;
        rewrite ^/webservice/(.*)/(.*)$ /webservice.php?module=$1&action=$2 break;
        rewrite ^/webservice/(.*)$ /webservice.php?action=$1 break;

        # SabreDAV
        rewrite ^/.well-known/caldav /dav.php redirect;
        rewrite ^/.well-known/carddav /dav.php redirect;

        # PHP
        location ~ ^(.+\.php)(.*)$ {
            try_files $fastcgi_script_name = 404;
            include /etc/nginx/fastcgi_params;
            fastcgi_split_path_info ^(.+\.php)(.*)$;

            # FIXME hostname of php-fpm is statically set, which is not good. But will work for docker-compose.
            # we do not use sockets, as it would imply having to share a file between 2 containers. Instead,
            # we use a TCP connection, which is a bit less efficient, but should be good enough in most cases.
            fastcgi_pass yeti-php-fpm:9000;

            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO        $fastcgi_path_info;

            fastcgi_read_timeout 600s;
        }
    }

}











